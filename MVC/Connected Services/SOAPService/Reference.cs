//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MVC.SOAPService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/WcfService")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SOAPService.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        MVC.SOAPService.CompositeType GetDataUsingDataContract(MVC.SOAPService.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<MVC.SOAPService.CompositeType> GetDataUsingDataContractAsync(MVC.SOAPService.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTravellers", ReplyAction="http://tempuri.org/IService1/GetTravellersResponse")]
        ApplicationService.DTOs.TravellerDTO[] GetTravellers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTravellers", ReplyAction="http://tempuri.org/IService1/GetTravellersResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.TravellerDTO[]> GetTravellersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PutTraveller", ReplyAction="http://tempuri.org/IService1/PutTravellerResponse")]
        string PutTraveller(ApplicationService.DTOs.TravellerDTO travellerDTOs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PutTraveller", ReplyAction="http://tempuri.org/IService1/PutTravellerResponse")]
        System.Threading.Tasks.Task<string> PutTravellerAsync(ApplicationService.DTOs.TravellerDTO travellerDTOs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PostTraveller", ReplyAction="http://tempuri.org/IService1/PostTravellerResponse")]
        string PostTraveller(ApplicationService.DTOs.TravellerDTO TravellerDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PostTraveller", ReplyAction="http://tempuri.org/IService1/PostTravellerResponse")]
        System.Threading.Tasks.Task<string> PostTravellerAsync(ApplicationService.DTOs.TravellerDTO TravellerDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTravellerById", ReplyAction="http://tempuri.org/IService1/GetTravellerByIdResponse")]
        ApplicationService.DTOs.TravellerDTO GetTravellerById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTravellerById", ReplyAction="http://tempuri.org/IService1/GetTravellerByIdResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.TravellerDTO> GetTravellerByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTravellerBySearch", ReplyAction="http://tempuri.org/IService1/GetTravellerBySearchResponse")]
        ApplicationService.DTOs.TravellerDTO[] GetTravellerBySearch(string Search);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTravellerBySearch", ReplyAction="http://tempuri.org/IService1/GetTravellerBySearchResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.TravellerDTO[]> GetTravellerBySearchAsync(string Search);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteTraveller", ReplyAction="http://tempuri.org/IService1/DeleteTravellerResponse")]
        string DeleteTraveller(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteTraveller", ReplyAction="http://tempuri.org/IService1/DeleteTravellerResponse")]
        System.Threading.Tasks.Task<string> DeleteTravellerAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDrivers", ReplyAction="http://tempuri.org/IService1/GetDriversResponse")]
        ApplicationService.DTOs.DriverDTO[] GetDrivers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDrivers", ReplyAction="http://tempuri.org/IService1/GetDriversResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.DriverDTO[]> GetDriversAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDriversBySearch", ReplyAction="http://tempuri.org/IService1/GetDriversBySearchResponse")]
        ApplicationService.DTOs.DriverDTO[] GetDriversBySearch(string Search);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDriversBySearch", ReplyAction="http://tempuri.org/IService1/GetDriversBySearchResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.DriverDTO[]> GetDriversBySearchAsync(string Search);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PutDriver", ReplyAction="http://tempuri.org/IService1/PutDriverResponse")]
        string PutDriver(ApplicationService.DTOs.DriverDTO driverDTOs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PutDriver", ReplyAction="http://tempuri.org/IService1/PutDriverResponse")]
        System.Threading.Tasks.Task<string> PutDriverAsync(ApplicationService.DTOs.DriverDTO driverDTOs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PostDriver", ReplyAction="http://tempuri.org/IService1/PostDriverResponse")]
        string PostDriver(ApplicationService.DTOs.DriverDTO driverDTOs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PostDriver", ReplyAction="http://tempuri.org/IService1/PostDriverResponse")]
        System.Threading.Tasks.Task<string> PostDriverAsync(ApplicationService.DTOs.DriverDTO driverDTOs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDriverById", ReplyAction="http://tempuri.org/IService1/GetDriverByIdResponse")]
        ApplicationService.DTOs.DriverDTO GetDriverById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDriverById", ReplyAction="http://tempuri.org/IService1/GetDriverByIdResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.DriverDTO> GetDriverByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteDriver", ReplyAction="http://tempuri.org/IService1/DeleteDriverResponse")]
        string DeleteDriver(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteDriver", ReplyAction="http://tempuri.org/IService1/DeleteDriverResponse")]
        System.Threading.Tasks.Task<string> DeleteDriverAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTrips", ReplyAction="http://tempuri.org/IService1/GetTripsResponse")]
        ApplicationService.DTOs.TripDTO[] GetTrips();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTrips", ReplyAction="http://tempuri.org/IService1/GetTripsResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.TripDTO[]> GetTripsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PutTrip", ReplyAction="http://tempuri.org/IService1/PutTripResponse")]
        string PutTrip(ApplicationService.DTOs.TripDTO tripDTOs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PutTrip", ReplyAction="http://tempuri.org/IService1/PutTripResponse")]
        System.Threading.Tasks.Task<string> PutTripAsync(ApplicationService.DTOs.TripDTO tripDTOs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PostTrip", ReplyAction="http://tempuri.org/IService1/PostTripResponse")]
        string PostTrip(ApplicationService.DTOs.TripDTO tripDTOs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PostTrip", ReplyAction="http://tempuri.org/IService1/PostTripResponse")]
        System.Threading.Tasks.Task<string> PostTripAsync(ApplicationService.DTOs.TripDTO tripDTOs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTripById", ReplyAction="http://tempuri.org/IService1/GetTripByIdResponse")]
        ApplicationService.DTOs.TripDTO GetTripById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTripById", ReplyAction="http://tempuri.org/IService1/GetTripByIdResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.TripDTO> GetTripByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTripsBySearch", ReplyAction="http://tempuri.org/IService1/GetTripsBySearchResponse")]
        ApplicationService.DTOs.TripDTO[] GetTripsBySearch(string Search);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTripsBySearch", ReplyAction="http://tempuri.org/IService1/GetTripsBySearchResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.TripDTO[]> GetTripsBySearchAsync(string Search);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteTrip", ReplyAction="http://tempuri.org/IService1/DeleteTripResponse")]
        string DeleteTrip(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteTrip", ReplyAction="http://tempuri.org/IService1/DeleteTripResponse")]
        System.Threading.Tasks.Task<string> DeleteTripAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : MVC.SOAPService.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<MVC.SOAPService.IService1>, MVC.SOAPService.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public MVC.SOAPService.CompositeType GetDataUsingDataContract(MVC.SOAPService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<MVC.SOAPService.CompositeType> GetDataUsingDataContractAsync(MVC.SOAPService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public ApplicationService.DTOs.TravellerDTO[] GetTravellers() {
            return base.Channel.GetTravellers();
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.TravellerDTO[]> GetTravellersAsync() {
            return base.Channel.GetTravellersAsync();
        }
        
        public string PutTraveller(ApplicationService.DTOs.TravellerDTO travellerDTOs) {
            return base.Channel.PutTraveller(travellerDTOs);
        }
        
        public System.Threading.Tasks.Task<string> PutTravellerAsync(ApplicationService.DTOs.TravellerDTO travellerDTOs) {
            return base.Channel.PutTravellerAsync(travellerDTOs);
        }
        
        public string PostTraveller(ApplicationService.DTOs.TravellerDTO TravellerDto) {
            return base.Channel.PostTraveller(TravellerDto);
        }
        
        public System.Threading.Tasks.Task<string> PostTravellerAsync(ApplicationService.DTOs.TravellerDTO TravellerDto) {
            return base.Channel.PostTravellerAsync(TravellerDto);
        }
        
        public ApplicationService.DTOs.TravellerDTO GetTravellerById(int id) {
            return base.Channel.GetTravellerById(id);
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.TravellerDTO> GetTravellerByIdAsync(int id) {
            return base.Channel.GetTravellerByIdAsync(id);
        }
        
        public ApplicationService.DTOs.TravellerDTO[] GetTravellerBySearch(string Search) {
            return base.Channel.GetTravellerBySearch(Search);
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.TravellerDTO[]> GetTravellerBySearchAsync(string Search) {
            return base.Channel.GetTravellerBySearchAsync(Search);
        }
        
        public string DeleteTraveller(int id) {
            return base.Channel.DeleteTraveller(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteTravellerAsync(int id) {
            return base.Channel.DeleteTravellerAsync(id);
        }
        
        public ApplicationService.DTOs.DriverDTO[] GetDrivers() {
            return base.Channel.GetDrivers();
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.DriverDTO[]> GetDriversAsync() {
            return base.Channel.GetDriversAsync();
        }
        
        public ApplicationService.DTOs.DriverDTO[] GetDriversBySearch(string Search) {
            return base.Channel.GetDriversBySearch(Search);
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.DriverDTO[]> GetDriversBySearchAsync(string Search) {
            return base.Channel.GetDriversBySearchAsync(Search);
        }
        
        public string PutDriver(ApplicationService.DTOs.DriverDTO driverDTOs) {
            return base.Channel.PutDriver(driverDTOs);
        }
        
        public System.Threading.Tasks.Task<string> PutDriverAsync(ApplicationService.DTOs.DriverDTO driverDTOs) {
            return base.Channel.PutDriverAsync(driverDTOs);
        }
        
        public string PostDriver(ApplicationService.DTOs.DriverDTO driverDTOs) {
            return base.Channel.PostDriver(driverDTOs);
        }
        
        public System.Threading.Tasks.Task<string> PostDriverAsync(ApplicationService.DTOs.DriverDTO driverDTOs) {
            return base.Channel.PostDriverAsync(driverDTOs);
        }
        
        public ApplicationService.DTOs.DriverDTO GetDriverById(int id) {
            return base.Channel.GetDriverById(id);
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.DriverDTO> GetDriverByIdAsync(int id) {
            return base.Channel.GetDriverByIdAsync(id);
        }
        
        public string DeleteDriver(int id) {
            return base.Channel.DeleteDriver(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteDriverAsync(int id) {
            return base.Channel.DeleteDriverAsync(id);
        }
        
        public ApplicationService.DTOs.TripDTO[] GetTrips() {
            return base.Channel.GetTrips();
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.TripDTO[]> GetTripsAsync() {
            return base.Channel.GetTripsAsync();
        }
        
        public string PutTrip(ApplicationService.DTOs.TripDTO tripDTOs) {
            return base.Channel.PutTrip(tripDTOs);
        }
        
        public System.Threading.Tasks.Task<string> PutTripAsync(ApplicationService.DTOs.TripDTO tripDTOs) {
            return base.Channel.PutTripAsync(tripDTOs);
        }
        
        public string PostTrip(ApplicationService.DTOs.TripDTO tripDTOs) {
            return base.Channel.PostTrip(tripDTOs);
        }
        
        public System.Threading.Tasks.Task<string> PostTripAsync(ApplicationService.DTOs.TripDTO tripDTOs) {
            return base.Channel.PostTripAsync(tripDTOs);
        }
        
        public ApplicationService.DTOs.TripDTO GetTripById(int id) {
            return base.Channel.GetTripById(id);
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.TripDTO> GetTripByIdAsync(int id) {
            return base.Channel.GetTripByIdAsync(id);
        }
        
        public ApplicationService.DTOs.TripDTO[] GetTripsBySearch(string Search) {
            return base.Channel.GetTripsBySearch(Search);
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.TripDTO[]> GetTripsBySearchAsync(string Search) {
            return base.Channel.GetTripsBySearchAsync(Search);
        }
        
        public string DeleteTrip(int id) {
            return base.Channel.DeleteTrip(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteTripAsync(int id) {
            return base.Channel.DeleteTripAsync(id);
        }
    }
}
